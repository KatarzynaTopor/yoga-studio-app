version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yoga-backend
    ports:
      - "8000:8000"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      JWT_PRIVATE_KEY: classpath:jwt/app.key
      JWT_PUBLIC_KEY: classpath:jwt/app.pub
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/target:/app/target
    entrypoint: ["java", "-jar", "/app/app.jar"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  ui-app:
      build:
        context: ./ui-app
        dockerfile: Dockerfile
      container_name: yoga-frontend
      ports:
        - "8080:8080"
      depends_on:
        - backend
      environment:
        - REACT_APP_BACKEND_URL=http://localhost:8000/api
        - CHOKIDAR_USEPOLLING=true  # Poprawia hot-reloading na Dockerze
      volumes:
        - ./ui-app:/app  # Mapowanie kodu źródłowego
        - /app/node_modules  # Zapobiega nadpisywaniu `node_modules`
      command: [ "npm", "start" ]  # Uruchamiamy React w trybie deweloperskim


  postgres:
    image: postgres:17
    container_name: postgres-container
    restart: always
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
